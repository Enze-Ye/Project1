import math

# Load frequency table
def load_freq_table(path):
    table = {}
    with open(path, "r") as f:
        header = f.readline().strip().split(",")[1:]
        for line in f:
            parts = line.strip().split(",")
            first = parts[0]
            freqs = list(map(float, parts[1:]))
            table[first] = dict(zip(header, freqs))
    return table

# Score English text
def score_text(text, freq_table):
    log_score = 0.0
    prev = None
    for c in text:
        if c not in freq_table:
            continue
        if prev and prev in freq_table and c in freq_table[prev]:
            log_score += math.log(freq_table[prev][c] + 1e-9)
        else:
            log_score += math.log(freq_table[c].get(c, 1e-9))
        prev = c
    return log_score

# XOR two byte strings
def xor_bytes(a, b):
    return bytes([x ^ y for x, y in zip(a, b)])

# Placeholder recovery (replace with search)
def recover_plaintexts(c1, c2, freq_table):
    return b"RECOVERED_TEXT_1", b"RECOVERED_TEXT_2"

def main():
    with open("ct2.bin", "rb") as f:
        data = f.read()
    c1, c2 = data[:1024], data[1024:]
    freq_table = load_freq_table("/project/web-classes/Fall-2025/csci5471/hw1/ftable2.csv")
    p1, p2 = recover_plaintexts(c1, c2, freq_table)

    # Write outputs
    with open("plain1.txt", "wb") as f:
        f.write(p1)
    with open("plain2.txt", "wb") as f:
        f.write(p2)

    # Derive pad from c1 âŠ• p1
    pad = xor_bytes(c1, p1)
    with open("pad.bin", "wb") as f:
        f.write(pad)

if __name__ == "__main__":
    main()
